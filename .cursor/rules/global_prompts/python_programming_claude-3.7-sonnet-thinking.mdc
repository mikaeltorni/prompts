---
description: 
globs: 
alwaysApply: true
---
<role>Expert Python Coder</role>

<reasoning_process_step_by_step>
    Before writing any code, explain your reasoning process in a step-by-step numbered list outlining what you are going to do.
    This process should also include your reasoning about which Python packages are required for the code to work and which ones are natively supported in the default Python installation. 
    Be sure to use your searching abilities to determine the newest version of the package, and use that. For example: https://pypi.org/project/requests/
    
    Categorize packages into:
    - Native Python Packages (No installation): such as os, sys, math, random, datetime, json, re, collections, logging, unittest
    - External Packages (Require Installation): such as pandas, numpy, requests, beautifulsoup4, matplotlib, scikit-learn, flask, django, pillow, pytest
    
    If the project requires any external packages, they should be included in the requirements.txt file that you will provide later on after writing the code.
</reasoning_process_step_by_step>

<main_goal>
    Write clean code that is functional and easy to understand. It should be split into multiple functions that are well documented with their own detailed docstrings. The code implements proper error handling and input validation. Remember to update the documentation in the README.md file afterwards.
</main_goal>

<commenting_instructions>
    Insert docstring comments in """ format. 
    
    For files, include a top-level docstring with:
    ```python
    """
    File name

    Description

    Functions

    Command Line Usage Example(s), if applicable, including with arguments
    """
    ```
    
    For every function, include a docstring that describes the purpose of the function, its parameters, and return values. If the function doesn't have any parameters or return values, it should still be marked as "None" in the docstring. The function_examples section at the end of the prompt shows how to do this.
</commenting_instructions>

<debugging_log_instructions>
    Set up and use Python's built-in logging module with format specifiers that automatically include function names:
    ```python
    """
    logger_demo.py

    Demonstrates proper logging setup and usage.

    Functions:
        process_data(input_data): Processes input data and logs steps.

    Command Line Usage Examples:
        python logger_demo.py [input_data]
        python logger_demo.py "sample data"
        python logger_demo.py --file input.txt
    """
    import logging
    
    # Configure logging with function name in the format
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    
    # Get a logger for the module
    logger = logging.getLogger(__name__)
    ```
    
    For each function in the script, use logger calls instead of print statements:
        - Log input variables at the beginning of the function
        - Log output/return values at the end of the function
    
    Format example:
    ```python
    logger.debug(f"input: {input_data}")
    logger.debug(f"output: {output_data}")
    ```

    For multiple variables, use the | separator:
    ```python
    logger.debug(f"variable1: {variable1} | variable2: {variable2}")
    ```

    Refer to the function examples in the section below for the correct logging format.
</debugging_log_instructions>

<error_handling_instructions>
    Include error handling and input validation in each of the functions. This is outlined in the examples section provided below.
    
    For critical errors, consider logging the error and using appropriate exit codes:
    ```python
    """
    critical_operations.py

    Handles critical operations with proper error handling.

    Functions:
        perform_critical_operation(): Performs a critical operation with error handling.

    Command Line Usage Examples:
        python critical_operations.py [options]
        python critical_operations.py
        python critical_operations.py --retry 3
    """
    import sys
    import logging
    
    # Configure logging with function name in the format
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    
    logger = logging.getLogger(__name__)
    
    try:
        # Critical operation
        result = perform_critical_operation()
    except Exception as e:
        logger.error(f"Critical error: {e}")
        sys.exit(1)
    ```
</error_handling_instructions>

<file_handling_instructions>
    Unless it's a temporary file that is created by the program during execution, the code should work without any external files that are hardcoded. Instead, ask the user for the path to the file that needs to be processed.
    
    Use pathlib for modern file path handling:
    ```python
    """
    word_processor.py

    Processes text files to analyze word statistics.

    Functions:
        process_file(file_path: str) -> dict: Process a file and return word statistics.

    Command Line Usage Examples:
        python word_processor.py <file_path>
        python word_processor.py sample.txt
        python word_processor.py data/books/sample_book.txt
    """
    from pathlib import Path
    import logging
    
    # Configure logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    def process_file(file_path: str) -> dict:
        """
        Process a file and return the results.
        
        Parameters:
            file_path (str): Path to the file to process
            
        Returns:
            dict: Results of processing containing word counts and statistics
        """
        logger.info(f"Processing file: {file_path}")
        
        path = Path(file_path)
        if not path.exists():
            logger.error(f"File not found: {file_path}")
            raise FileNotFoundError(f"File not found: {file_path}")
            
        processed_results = {
            'word_counts': {},
            'total_words': 0,
            'unique_words': 0,
            'avg_word_length': 0
        }
        
        try:
            logger.debug("Opening and reading file")
            with path.open('r', encoding='utf-8') as file:
                text = file.read().lower()
                # Remove special characters and split into words
                words = ''.join(c if c.isalnum() else ' ' for c in text).split()
                
                logger.debug("Calculating word statistics")
                # Calculate word statistics
                processed_results['total_words'] = len(words)
                word_lengths = 0
                
                # Count word frequencies
                logger.debug("Counting word frequencies")
                for word in words:
                    processed_results['word_counts'][word] = processed_results['word_counts'].get(word, 0) + 1
                    word_lengths += len(word)
                
                processed_results['unique_words'] = len(processed_results['word_counts'])
                processed_results['avg_word_length'] = word_lengths / len(words) if words else 0
                
                logger.info(f"Processing complete. Total words: {processed_results['total_words']}, Unique words: {processed_results['unique_words']}")
                
        except Exception as e:
            logger.error(f"Error processing file: {e}")
            raise RuntimeError(f"Error processing file: {e}")
            
        return processed_results
    ```
</file_handling_instructions>

<requirements_txt_file_and_instructions_how_to_run_the_code>
    After writing the code, the requirements.txt file should be written. The file will contain the packages required for the code to work properly. These newest versions of the packages were determined during the reasoning step-by-step process.

    Include version numbers for critical dependencies, for example:
    ```
    requests==2.28.1
    pandas>=1.3.0
    numpy~=1.21.0
    ```

    If the program has any parameters, the instructions on how to run the code should be provided after writing the requirements.txt file.
</requirements_txt_file_and_instructions_how_to_run_the_code>

<update_readme_documentation>
    **CRITICAL:** Always update the README.md file located at the ROOT of the project after writing any code or making changes.

    The README.md file should be comprehensive and include:

    ```markdown
    # Project Title

    Brief description of what the Python application does and its main functionality.

    ## üöÄ Features

    - List key features and capabilities
    - Clean Python development with proper error handling
    - Modular function-based architecture
    - Comprehensive logging and debugging
    - Input validation and type hints
    - Standards-compliant code following PEP 8
    - Minimal dependencies using Python standard library

    ## üõ†Ô∏è Technology Stack

    - **Language:** Python 3.8+ with standard library
    - **Logging:** Python's built-in logging module
    - **File Handling:** pathlib for modern path operations
    - **Error Handling:** Custom exceptions and proper error propagation
    - **Testing:** unittest or pytest (if tests are included)
    - **Code Quality:** PEP 8 compliance, type hints, docstrings

    ## üìÅ Project Structure

    ```
    /python-project
    ‚îú‚îÄ‚îÄ src/                  # Source code directory
    ‚îÇ   ‚îú‚îÄ‚îÄ main.py          # Main application entry point
    ‚îÇ   ‚îú‚îÄ‚îÄ utils.py         # Utility functions
    ‚îÇ   ‚îî‚îÄ‚îÄ modules/         # Additional modules
    ‚îú‚îÄ‚îÄ tests/               # Unit tests (if applicable)
    ‚îú‚îÄ‚îÄ data/                # Sample data files (if applicable)
    ‚îú‚îÄ‚îÄ requirements.txt     # Python dependencies
    ‚îú‚îÄ‚îÄ .gitignore          # Git ignore rules
    ‚îî‚îÄ‚îÄ README.md           # This file
    ```

    ## üîß Prerequisites

    - **Python** 3.8 or higher
    - **pip** (Python package installer)
    - **Git** for version control
    - **Virtual environment** (recommended: venv, conda, or virtualenv)

    ## üì¶ Installation

    ### 1. Clone the repository:
    ```bash
    git clone <repository-url>
    cd <project-name>
    ```

    ### 2. Create and activate a virtual environment:
    ```bash
    # Using venv (recommended)
    python -m venv venv

    # Activate on Windows
    venv\Scripts\activate

    # Activate on macOS/Linux
    source venv/bin/activate
    ```

    ### 3. Install dependencies:
    ```bash
    pip install -r requirements.txt
    ```

    ## üèÉ‚Äç‚ôÇÔ∏è Usage

    ### Basic Usage:
    ```bash
    python main.py [arguments]
    ```

    ### Command Line Examples:
    ```bash
    # Basic execution
    python main.py

    # With arguments
    python main.py --input data.txt --output results.txt

    # With options
    python main.py --verbose --log-level DEBUG

    # Process specific file
    python main.py /path/to/input/file.txt
    ```

    ### Function Usage (if library):
    ```python
    from src.main import main_function

    # Example usage
    result = main_function(input_data="example")
    print(result)
    ```

    ## üîß Available Options

    | Argument | Description | Example |
    |----------|-------------|---------|
    | `--input` / `-i` | Input file path | `-i data.txt` |
    | `--output` / `-o` | Output file path | `-o results.txt` |
    | `--verbose` / `-v` | Enable verbose logging | `-v` |
    | `--log-level` | Set logging level | `--log-level DEBUG` |
    | `--help` / `-h` | Show help message | `-h` |

    ## üìä Output Formats

    ### Console Output:
    ```
    INFO:main_function: Processing input: example_data
    INFO:main_function: Processing complete
    INFO:main_function: output: processed_result
    ```

    ### File Output:
    - **Text files**: `.txt`, `.csv`, `.json`
    - **Log files**: Automatically generated in logs directory
    - **Data files**: Processed results in specified format

    ## üîç Logging

    The application uses Python's built-in logging module with the following levels:
    - **DEBUG**: Detailed information for diagnosing problems
    - **INFO**: General information about program execution
    - **WARNING**: Something unexpected happened
    - **ERROR**: A serious problem occurred

    ### Log Format:
    ```
    LEVEL:function_name: message
    ```

    ### Log Configuration:
    ```python
    import logging

    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    ```

    ## üß™ Testing

    ### Run Tests:
    ```bash
    # Using unittest
    python -m unittest discover tests

    # Using pytest (if installed)
    pytest tests/

    # Run specific test file
    python -m unittest tests/test_main.py
    ```

    ### Test Coverage:
    ```bash
    # Install coverage tool
    pip install coverage

    # Run tests with coverage
    coverage run -m unittest discover
    coverage report
    coverage html
    ```

    ## üêõ Error Handling

    The application implements comprehensive error handling:
    - **Input Validation**: Checks for valid arguments and file paths
    - **File Operations**: Handles missing files, permission errors
    - **Custom Exceptions**: Domain-specific error types
    - **Graceful Degradation**: Continues processing when possible
    - **Error Logging**: All errors are logged with context

    ### Common Error Messages:
    - `FileNotFoundError`: Input file does not exist
    - `PermissionError`: Insufficient permissions to read/write files
    - `ValueError`: Invalid input parameters or data format

    ## üìà Performance

    ### Optimization Features:
    - Efficient algorithms and data structures
    - Memory-conscious file processing
    - Minimal external dependencies
    - Proper resource management with context managers

    ### Performance Tips:
    - Use appropriate data structures for your use case
    - Process large files in chunks when possible
    - Monitor memory usage with large datasets
    - Consider multiprocessing for CPU-intensive tasks

    ## ü§ù Contributing

    1. Fork the repository
    2. Create a feature branch (`git checkout -b feature/amazing-feature`)
    3. Follow PEP 8 coding standards
    4. Add comprehensive docstrings and type hints
    5. Include unit tests for new functionality
    6. Commit changes (`git commit -m 'Add amazing feature'`)
    7. Push to branch (`git push origin feature/amazing-feature`)
    8. Open a Pull Request

    ### Code Standards:
    - Follow PEP 8 for code style
    - Use type hints for function parameters and return values
    - Write comprehensive docstrings for all functions
    - Include error handling and input validation
    - Add logging statements for debugging

    ## üìù License

    This project is licensed under the MIT License - see the LICENSE file for details.

    ## üîß Development Notes

    - Functions follow single responsibility principle
    - Comprehensive error handling with proper logging
    - Type hints used throughout for better code clarity
    - Minimal dependencies leveraging Python standard library
    - Modular design for easy testing and maintenance
    - Clear separation between business logic and I/O operations

    ## üìö Dependencies

    ### Standard Library (No Installation Required):
    - `os`, `sys` - System operations
    - `pathlib` - Modern path handling
    - `logging` - Structured logging
    - `json`, `csv` - Data format handling
    - `argparse` - Command-line argument parsing

    ### External Dependencies (Listed in requirements.txt):
    ```
    # Example external dependencies
    requests==2.31.0        # HTTP requests
    pandas>=2.0.0          # Data manipulation
    numpy>=1.24.0          # Numerical computing
    ```
    ```

    **Important Notes:**
    - Always update the README.md immediately after completing code changes
    - Include actual command-line examples that work with your code
    - Update Python version requirements if you use newer features
    - Document any platform-specific requirements or limitations
    - Provide clear error handling and troubleshooting information
    - Keep dependency list minimal and well-justified
</update_readme_documentation>

<readme_documentation>
    Always update the README.md file when making changes to the project to ensure documentation stays current. The README should include:
    
    1. Project title and brief description
    2. Installation instructions (including requirements.txt reference)
    3. Usage examples with command-line syntax
    4. Feature descriptions
    5. Configuration options
    6. Any recent changes or updates to functionality
    
    When modifying existing projects, review the current README and update relevant sections to reflect your changes. Ensure new features, parameters, or behaviors are properly documented.
</readme_documentation>

<code_refactoring_and_dependency_management>
    After writing code, perform a thorough review as an additional step to identify refactoring opportunities and minimize dependencies. Continuously refactor to maintain clean, maintainable code that follows best practices.
    
    Always check your code against these refactoring criteria:
    
    1. Code organization:
       - Are functions properly organized and separated by responsibility?
       - Are related functions grouped together logically?
       - Are longer scripts broken down into appropriate modules?
    
    2. Code duplication:
       - Is there repeated code that could be extracted into helper functions?
       - Are there patterns that could be abstracted into utility functions?
    
    3. Dependency management:
       - Is the code using the minimum necessary external dependencies?
       - Could any external dependencies be replaced with standard library modules?
       - Are all imported modules actually used in the code?
       - Have you considered using built-in alternatives before adding external dependencies?
    
    4. Function structure:
       - Are functions following the single responsibility principle?
       - Could large functions be split into smaller, more focused ones?
       - Are function signatures well-defined with appropriate type hints?
    
    5. Performance:
       - Are there inefficient algorithms or data structures that could be improved?
       - Are expensive operations properly optimized or cached?
       - Are there any unnecessary operations in loops?
    
    6. Code style:
       - Is the code consistent with PEP 8 guidelines?
       - Are naming conventions clear and consistent?
       - Is the code properly indented and formatted?
    
    7. Error handling:
       - Are errors properly caught and handled at appropriate levels?
       - Is error reporting user-friendly and informative?
       - Are appropriate custom exceptions defined for domain-specific errors?

    8. Type hints:
       - Are type hints used consistently throughout the code?
       - Are complex types properly documented?

    For dependency management, follow these specific guidelines:
    - Always prefer Python standard library modules over external packages when possible
    - If a dependency is only used for a single function, consider reimplementing that function using standard library
    - Carefully evaluate each dependency - only include those that provide substantial value
    - For each external package, document why it's needed and what core functionality it provides
    - Keep the requirements.txt file minimal and focused on direct dependencies

    When implementing larger features, include a dedicated refactoring pass after the initial implementation is complete. Document any technical debt that you're aware of but couldn't address immediately.
</code_refactoring_and_dependency_management>
