---
description: 
globs: 
alwaysApply: false
---
<role>Expert Python Coder</role>

<reasoning_process_step_by_step>
    Before writing any code, explain your reasoning process in a step-by-step numbered list outlining what you are going to do.
    This process should also include your reasoning about which Python packages are required for the code to work and which ones are natively supported in the default Python installation. 
    Be sure to use your searching abilities to determine the newest version of the package, and use that. For example: https://pypi.org/project/requests/
    
    Categorize packages into:
    - Native Python Packages (No installation): such as os, sys, math, random, datetime, json, re, collections, logging, unittest
    - External Packages (Require Installation): such as pandas, numpy, requests, beautifulsoup4, matplotlib, scikit-learn, flask, django, pillow, pytest
    
    If the project requires any external packages, they should be included in the requirements.txt file that you will provide later on after writing the code.
</reasoning_process_step_by_step>

<main_goal>
    Write clean code that is functional and easy to understand. It should be split into multiple functions that are well documented with their own detailed docstrings. The code implements proper error handling and input validation.
</main_goal>

<commenting_instructions>
    Insert docstring comments in """ format. 
    
    For files, include a top-level docstring with:
    ```python
    """
    File name

    Description

    Functions

    Command Line Usage Example(s), if applicable, including with arguments
    """
    ```
    
    For every function, include a docstring that describes the purpose of the function, its parameters, and return values. If the function doesn't have any parameters or return values, it should still be marked as "None" in the docstring. The function_examples section at the end of the prompt shows how to do this.
</commenting_instructions>

<debugging_log_instructions>
    Set up and use Python's built-in logging module with format specifiers that automatically include function names:
    ```python
    """
    logger_demo.py

    Demonstrates proper logging setup and usage.

    Functions:
        process_data(input_data): Processes input data and logs steps.

    Command Line Usage Examples:
        python logger_demo.py [input_data]
        python logger_demo.py "sample data"
        python logger_demo.py --file input.txt
    """
    import logging
    
    # Configure logging with function name in the format
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    
    # Get a logger for the module
    logger = logging.getLogger(__name__)
    ```
    
    For each function in the script, use logger calls instead of print statements:
        - Log input variables at the beginning of the function
        - Log output/return values at the end of the function
    
    Format example:
    ```python
    logger.debug(f"input: {input_data}")
    logger.debug(f"output: {output_data}")
    ```

    For multiple variables, use the | separator:
    ```python
    logger.debug(f"variable1: {variable1} | variable2: {variable2}")
    ```

    Refer to the function examples in the section below for the correct logging format.
</debugging_log_instructions>

<error_handling_instructions>
    Include error handling and input validation in each of the functions. This is outlined in the examples section provided below.
    
    For critical errors, consider logging the error and using appropriate exit codes:
    ```python
    """
    critical_operations.py

    Handles critical operations with proper error handling.

    Functions:
        perform_critical_operation(): Performs a critical operation with error handling.

    Command Line Usage Examples:
        python critical_operations.py [options]
        python critical_operations.py
        python critical_operations.py --retry 3
    """
    import sys
    import logging
    
    # Configure logging with function name in the format
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    
    logger = logging.getLogger(__name__)
    
    try:
        # Critical operation
        result = perform_critical_operation()
    except Exception as e:
        logger.error(f"Critical error: {e}")
        sys.exit(1)
    ```
</error_handling_instructions>

<file_handling_instructions>
    Unless it's a temporary file that is created by the program during execution, the code should work without any external files that are hardcoded. Instead, ask the user for the path to the file that needs to be processed.
    
    Use pathlib for modern file path handling:
    ```python
    """
    word_processor.py

    Processes text files to analyze word statistics.

    Functions:
        process_file(file_path: str) -> dict: Process a file and return word statistics.

    Command Line Usage Examples:
        python word_processor.py <file_path>
        python word_processor.py sample.txt
        python word_processor.py data/books/sample_book.txt
    """
    from pathlib import Path
    import logging
    
    # Configure logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    def process_file(file_path: str) -> dict:
        """
        Process a file and return the results.
        
        Parameters:
            file_path (str): Path to the file to process
            
        Returns:
            dict: Results of processing containing word counts and statistics
        """
        logger.info(f"Processing file: {file_path}")
        
        path = Path(file_path)
        if not path.exists():
            logger.error(f"File not found: {file_path}")
            raise FileNotFoundError(f"File not found: {file_path}")
            
        processed_results = {
            'word_counts': {},
            'total_words': 0,
            'unique_words': 0,
            'avg_word_length': 0
        }
        
        try:
            logger.debug("Opening and reading file")
            with path.open('r', encoding='utf-8') as file:
                text = file.read().lower()
                # Remove special characters and split into words
                words = ''.join(c if c.isalnum() else ' ' for c in text).split()
                
                logger.debug("Calculating word statistics")
                # Calculate word statistics
                processed_results['total_words'] = len(words)
                word_lengths = 0
                
                # Count word frequencies
                logger.debug("Counting word frequencies")
                for word in words:
                    processed_results['word_counts'][word] = processed_results['word_counts'].get(word, 0) + 1
                    word_lengths += len(word)
                
                processed_results['unique_words'] = len(processed_results['word_counts'])
                processed_results['avg_word_length'] = word_lengths / len(words) if words else 0
                
                logger.info(f"Processing complete. Total words: {processed_results['total_words']}, Unique words: {processed_results['unique_words']}")
                
        except Exception as e:
            logger.error(f"Error processing file: {e}")
            raise RuntimeError(f"Error processing file: {e}")
            
        return processed_results
    ```
</file_handling_instructions>

<looping_of_the_program_instructions>
    If the program is a command-line application, the execution should continue in a loop until the user decides to stop the program.
</looping_of_the_program_instructions>

<requirements_txt_file_and_instructions_how_to_run_the_code>
    After writing the code, the requirements.txt file should be written. The file will contain the packages required for the code to work properly. These newest versions of the packages were determined during the reasoning step-by-step process.

    Include version numbers for critical dependencies, for example:
    ```
    requests==2.28.1
    pandas>=1.3.0
    numpy~=1.21.0
    ```

    If the program has any parameters, the instructions on how to run the code should be provided after writing the requirements.txt file.
</requirements_txt_file_and_instructions_how_to_run_the_code>

<examples>
    <function_examples>
        <example id="1">
            <description>function that processes a list of numbers with proper docstring and logging.</description>
            <code>
                ```python
                """
                stats_processor.py

                Processes numerical data to calculate statistics.

                Functions:
                    calculate_filtered_average(numbers, threshold=2.0): Calculates average excluding outliers.

                Command Line Usage Examples:
                    python stats_processor.py [numbers] [threshold]
                    python stats_processor.py "1,2,3,4,5" 2.0
                    python stats_processor.py --file numbers.txt --threshold 1.5
                """
                import logging
                
                # Logger setup would typically be at the module level
                logger = logging.getLogger(__name__)
                
                def calculate_filtered_average(numbers, threshold=2.0):
                    """
                    Calculates the average of numbers in a list, excluding outliers.
                    
                    Parameters:
                        numbers (list): List of numbers to process
                        threshold (float): Threshold for excluding outliers, default 2.0
                        
                    Returns:
                        float: Calculated average excluding outliers
                    """
                    logger.debug(f"numbers: {numbers} | threshold: {threshold}")
                    
                    if not numbers:
                        raise ValueError("Input list cannot be empty")
                        
                    if not all(isinstance(x, (int, float)) for x in numbers):
                        raise TypeError("All elements must be numbers")
                        
                    mean = sum(numbers) / len(numbers)
                    std_dev = (sum((x - mean) ** 2 for x in numbers) / len(numbers)) ** 0.5
                    
                    filtered = [x for x in numbers if abs(x - mean) <= threshold * std_dev]
                    result = sum(filtered) / len(filtered) if filtered else 0
                    
                    logger.debug(f"result: {result}")
                    return result
                ```
            </code>
        </example>

        <example id="2">
            <description>function that validates and processes text input with proper docstring, type hints, and logging.</description>
            <code>
                ```python
                """
                text_processor.py

                Analyzes text to count word frequencies.

                Functions:
                    process_text_frequency(text: str, min_length: int = 3) -> Dict[str, int]: Count word frequencies.

                Command Line Usage Examples:
                    python text_processor.py [text] [min_length]
                    python text_processor.py "Sample text to analyze" 3
                    python text_processor.py --file input.txt --min-length 4
                """
                from typing import Dict
                import logging
                
                # Logger setup would typically be at the module level
                logger = logging.getLogger(__name__)
                
                def process_text_frequency(text: str, min_length: int = 3) -> Dict[str, int]:
                    """
                    Processes text by removing special characters and counting word frequency.
                    
                    Parameters:
                        text (str): Input text to process
                        min_length (int): Minimum word length to include, default 3
                        
                    Returns:
                        Dict[str, int]: Dictionary of word frequencies
                    """
                    logger.debug(f"text length: {len(text)} | min_length: {min_length}")
                    
                    if not isinstance(text, str):
                        raise TypeError("Input must be a string")
                        
                    if min_length < 1:
                        raise ValueError("Minimum length must be positive")
                        
                    words = ''.join(c.lower() if c.isalnum() else ' ' for c in text).split()
                    word_counts: Dict[str, int] = {}
                    
                    for word in words:
                        if len(word) >= min_length:
                            word_counts[word] = word_counts.get(word, 0) + 1
                    
                    logger.debug(f"unique words found: {len(word_counts)}")
                    return word_counts
                ```
            </code>
        </example>

        <example id="3">
            <description>function that validates and transforms data with a proper docstring that doesn't have any parameters or return values. They are marked as "None" in the docstring.</description>
            <code>
                ```python
                """
                system_monitor.py

                Displays system performance statistics.

                Functions:
                    display_system_status() -> None: Displays CPU, memory, and disk usage.

                Command Line Usage Examples:
                    python system_monitor.py
                    python system_monitor.py --refresh 5
                """
                import logging
                
                # Logger setup would typically be at the module level
                logger = logging.getLogger(__name__)
                
                def display_system_status() -> None:
                    """
                    Displays system status information.
    
                    Parameters:
                        None
                        
                    Returns:
                        None
                    """
                    logger.debug("Initiating system status display")
                    print("CPU Usage: 45%")
                    print("Memory Usage: 68%")
                    print("Disk Usage: 80%")
                    logger.debug("System status display complete")
                ```
            </code>
        </example>
    </function_examples>
    <error_handling>
        <example id="1">
            <description>Basic try-except for handling division by zero with logging.</description>
            <code>
                ```python
                """
                division_calculator.py

                Performs division operations safely.

                Functions:
                    None

                Command Line Usage Examples:
                    python division_calculator.py <numerator> <denominator>
                    python division_calculator.py 10 2
                    python division_calculator.py 10 0
                """
                import logging
                
                logger = logging.getLogger(__name__)
                
                try:
                    result = 10 / 0
                except ZeroDivisionError:
                    logger.error("Division by zero error.")
                ```
            </code>
        </example>

        <example id="2">
            <description>Handling multiple exceptions with else and finally clauses using logging.</description>
            <code>
                ```python
                """
                calculator.py

                Interactive calculator program.

                Functions:
                    None

                Command Line Usage Example:
                    python calculator.py
                """
                import logging
                
                logger = logging.getLogger(__name__)
                
                try:
                    num = int(input("Enter a number: "))
                    result = 100 / num
                except ValueError:
                    logger.error("Invalid input: not a valid number.")
                except ZeroDivisionError:
                    logger.error("Cannot divide by zero.")
                else:
                    logger.info(f"Result: {result}")
                finally:
                    logger.debug("Operation complete.")
                ```
            </code>
        </example>

        <example id="3">
            <description>Error handling for file operations with logging, addressing missing files and other unexpected errors.</description>
            <code>
                ```python
                """
                file_reader.py

                Reads and processes text files.

                Functions:
                    None

                Command Line Usage Examples:
                    python file_reader.py <filename>
                    python file_reader.py data.txt
                    python file_reader.py reports/monthly.txt
                """
                import logging
                
                logger = logging.getLogger(__name__)
                
                try:
                    with open("data.txt", "r") as file:
                        data = file.read()
                except FileNotFoundError:
                    logger.error("File not found.")
                except Exception as e:
                    logger.error(f"An unexpected error occurred: {e}")
                ```
            </code>
        </example>
    </error_handling>

    <input_validation>
        <example id="1">
            <description>Validating numeric input using the isdigit() function with logging.</description>
            <code>
                ```python
                """
                number_validator.py

                Validates numerical input.

                Functions:
                    None

                Command Line Usage Example:
                    python number_validator.py
                """
                import logging
                
                logger = logging.getLogger(__name__)
                
                user_input = input("Enter a number: ")
                if user_input.isdigit():
                    number = int(user_input)
                    logger.info(f"Valid number: {number}")
                else:
                    logger.warning("Invalid input: please enter only digits.")
                ```
            </code>
        </example>

        <example id="2">
            <description>Validating an email address using regular expressions with logging.</description>
            <code>
                ```python
                """
                email_validator.py

                Validates email address format.

                Functions:
                    None

                Command Line Usage Examples:
                    python email_validator.py
                    python email_validator.py --batch emails.txt
                """
                import re
                import logging
                
                logger = logging.getLogger(__name__)
                
                email = input("Enter your email: ")
                pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
                if re.match(pattern, email):
                    logger.info("Valid email address.")
                else:
                    logger.warning("Invalid email format.")
                ```
            </code>
        </example>

        <example id="3">
            <description>Validating password strength with logging by checking length and required character types.</description>
            <code>
                ```python
                """
                password_validator.py

                Validates password strength.

                Functions:
                    None

                Command Line Usage Examples:
                    python password_validator.py
                    python password_validator.py --min-length 10
                """
                import re
                import logging
                
                logger = logging.getLogger(__name__)
                
                password = input("Enter a password: ")
                if len(password) < 8:
                    logger.warning("Password too short; must be at least 8 characters.")
                elif not re.search("[a-z]", password) or not re.search("[A-Z]", password) or not re.search("[0-9]", password):
                    logger.warning("Password must contain at least one lowercase letter, one uppercase letter, and one digit.")
                else:
                    logger.info("Password is strong.")
                ```
            </code>
        </example>
    </input_validation>
</examples>
