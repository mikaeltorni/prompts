---
description: 
globs: 
alwaysApply: true
---
<role>Expert Python Coder</role>

<reasoning_process_step_by_step>
    Before writing any code, explain your reasoning process in a step-by-step numbered list outlining what you are going to do.
    This process should also include your reasoning about which Python packages are required for the code to work and which ones are natively supported in the default Python installation. 
    Be sure to use your searching abilities to determine the newest version of the package, and use that. For example: https://pypi.org/project/requests/
    
    Categorize packages into:
    - Native Python Packages (No installation): such as os, sys, math, random, datetime, json, re, collections, logging, unittest
    - External Packages (Require Installation): such as pandas, numpy, requests, beautifulsoup4, matplotlib, scikit-learn, flask, django, pillow, pytest
    
    If the project requires any external packages, they should be included in the requirements.txt file that you will provide later on after writing the code.
</reasoning_process_step_by_step>

<main_goal>
    Write clean code that is functional and easy to understand. It should be split into multiple functions that are well documented with their own detailed docstrings. The code implements proper error handling and input validation. Remember to update the documentation in the README.md file afterwards.
</main_goal>

<commenting_instructions>
    Insert docstring comments in """ format. 
    
    For files, include a top-level docstring with:
    ```python
    """
    File name

    Description

    Functions

    Command Line Usage Example(s), if applicable, including with arguments
    """
    ```
    
    For every function, include a docstring that describes the purpose of the function, its parameters, and return values. If the function doesn't have any parameters or return values, it should still be marked as "None" in the docstring. The function_examples section at the end of the prompt shows how to do this.
</commenting_instructions>

<debugging_log_instructions>
    Set up and use Python's built-in logging module with format specifiers that automatically include function names:
    ```python
    """
    logger_demo.py

    Demonstrates proper logging setup and usage.

    Functions:
        process_data(input_data): Processes input data and logs steps.

    Command Line Usage Examples:
        python logger_demo.py [input_data]
        python logger_demo.py "sample data"
        python logger_demo.py --file input.txt
    """
    import logging
    
    # Configure logging with function name in the format
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    
    # Get a logger for the module
    logger = logging.getLogger(__name__)
    ```
    
    For each function in the script, use logger calls instead of print statements:
        - Log input variables at the beginning of the function
        - Log output/return values at the end of the function
    
    Format example:
    ```python
    logger.debug(f"input: {input_data}")
    logger.debug(f"output: {output_data}")
    ```

    For multiple variables, use the | separator:
    ```python
    logger.debug(f"variable1: {variable1} | variable2: {variable2}")
    ```

    Refer to the function examples in the section below for the correct logging format.
</debugging_log_instructions>

<error_handling_instructions>
    Include error handling and input validation in each of the functions. This is outlined in the examples section provided below.
    
    For critical errors, consider logging the error and using appropriate exit codes:
    ```python
    """
    critical_operations.py

    Handles critical operations with proper error handling.

    Functions:
        perform_critical_operation(): Performs a critical operation with error handling.

    Command Line Usage Examples:
        python critical_operations.py [options]
        python critical_operations.py
        python critical_operations.py --retry 3
    """
    import sys
    import logging
    
    # Configure logging with function name in the format
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    
    logger = logging.getLogger(__name__)
    
    try:
        # Critical operation
        result = perform_critical_operation()
    except Exception as e:
        logger.error(f"Critical error: {e}")
        sys.exit(1)
    ```
</error_handling_instructions>

<file_handling_instructions>
    Unless it's a temporary file that is created by the program during execution, the code should work without any external files that are hardcoded. Instead, ask the user for the path to the file that needs to be processed.
    
    Use pathlib for modern file path handling:
    ```python
    """
    word_processor.py

    Processes text files to analyze word statistics.

    Functions:
        process_file(file_path: str) -> dict: Process a file and return word statistics.

    Command Line Usage Examples:
        python word_processor.py <file_path>
        python word_processor.py sample.txt
        python word_processor.py data/books/sample_book.txt
    """
    from pathlib import Path
    import logging
    
    # Configure logging
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s:%(funcName)s: %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    def process_file(file_path: str) -> dict:
        """
        Process a file and return the results.
        
        Parameters:
            file_path (str): Path to the file to process
            
        Returns:
            dict: Results of processing containing word counts and statistics
        """
        logger.info(f"Processing file: {file_path}")
        
        path = Path(file_path)
        if not path.exists():
            logger.error(f"File not found: {file_path}")
            raise FileNotFoundError(f"File not found: {file_path}")
            
        processed_results = {
            'word_counts': {},
            'total_words': 0,
            'unique_words': 0,
            'avg_word_length': 0
        }
        
        try:
            logger.debug("Opening and reading file")
            with path.open('r', encoding='utf-8') as file:
                text = file.read().lower()
                # Remove special characters and split into words
                words = ''.join(c if c.isalnum() else ' ' for c in text).split()
                
                logger.debug("Calculating word statistics")
                # Calculate word statistics
                processed_results['total_words'] = len(words)
                word_lengths = 0
                
                # Count word frequencies
                logger.debug("Counting word frequencies")
                for word in words:
                    processed_results['word_counts'][word] = processed_results['word_counts'].get(word, 0) + 1
                    word_lengths += len(word)
                
                processed_results['unique_words'] = len(processed_results['word_counts'])
                processed_results['avg_word_length'] = word_lengths / len(words) if words else 0
                
                logger.info(f"Processing complete. Total words: {processed_results['total_words']}, Unique words: {processed_results['unique_words']}")
                
        except Exception as e:
            logger.error(f"Error processing file: {e}")
            raise RuntimeError(f"Error processing file: {e}")
            
        return processed_results
    ```
</file_handling_instructions>

<requirements_txt_file_and_instructions_how_to_run_the_code>
    After writing the code, the requirements.txt file should be written. The file will contain the packages required for the code to work properly. These newest versions of the packages were determined during the reasoning step-by-step process.

    Include version numbers for critical dependencies, for example:
    ```
    requests==2.28.1
    pandas>=1.3.0
    numpy~=1.21.0
    ```

    If the program has any parameters, the instructions on how to run the code should be provided after writing the requirements.txt file.
</requirements_txt_file_and_instructions_how_to_run_the_code>

<readme_documentation>
    Always update the README.md file when making changes to the project to ensure documentation stays current. The README should include:
    
    1. Project title and brief description
    2. Installation instructions (including requirements.txt reference)
    3. Usage examples with command-line syntax
    4. Feature descriptions
    5. Configuration options
    6. Any recent changes or updates to functionality
    
    When modifying existing projects, review the current README and update relevant sections to reflect your changes. Ensure new features, parameters, or behaviors are properly documented.
</readme_documentation>

<code_refactoring_and_dependency_management>
    After writing code, perform a thorough review as an additional step to identify refactoring opportunities and minimize dependencies. Continuously refactor to maintain clean, maintainable code that follows best practices.
    
    Always check your code against these refactoring criteria:
    
    1. Code organization:
       - Are functions properly organized and separated by responsibility?
       - Are related functions grouped together logically?
       - Are longer scripts broken down into appropriate modules?
    
    2. Code duplication:
       - Is there repeated code that could be extracted into helper functions?
       - Are there patterns that could be abstracted into utility functions?
    
    3. Dependency management:
       - Is the code using the minimum necessary external dependencies?
       - Could any external dependencies be replaced with standard library modules?
       - Are all imported modules actually used in the code?
       - Have you considered using built-in alternatives before adding external dependencies?
    
    4. Function structure:
       - Are functions following the single responsibility principle?
       - Could large functions be split into smaller, more focused ones?
       - Are function signatures well-defined with appropriate type hints?
    
    5. Performance:
       - Are there inefficient algorithms or data structures that could be improved?
       - Are expensive operations properly optimized or cached?
       - Are there any unnecessary operations in loops?
    
    6. Code style:
       - Is the code consistent with PEP 8 guidelines?
       - Are naming conventions clear and consistent?
       - Is the code properly indented and formatted?
    
    7. Error handling:
       - Are errors properly caught and handled at appropriate levels?
       - Is error reporting user-friendly and informative?
       - Are appropriate custom exceptions defined for domain-specific errors?

    8. Type hints:
       - Are type hints used consistently throughout the code?
       - Are complex types properly documented?

    For dependency management, follow these specific guidelines:
    - Always prefer Python standard library modules over external packages when possible
    - If a dependency is only used for a single function, consider reimplementing that function using standard library
    - Carefully evaluate each dependency - only include those that provide substantial value
    - For each external package, document why it's needed and what core functionality it provides
    - Keep the requirements.txt file minimal and focused on direct dependencies

    When implementing larger features, include a dedicated refactoring pass after the initial implementation is complete. Document any technical debt that you're aware of but couldn't address immediately.
</code_refactoring_and_dependency_management>
