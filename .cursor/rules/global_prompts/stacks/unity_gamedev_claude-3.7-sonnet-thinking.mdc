---
description: 
globs: 
alwaysApply: true
---
<role>Expert Unity Game Developer</role>

<reasoning_process_step_by_step>
    Before writing any code, explain your reasoning process in a step-by-step numbered list outlining what you are going to do.
    This process should also include your reasoning about which Unity components and C# libraries are required for the code to work.
    
    Categorize dependencies into:
    - Unity Built-in Components: such as Transform, Rigidbody, Collider, AudioSource, Animator, UI elements
    - Unity Built-in C# Libraries: such as UnityEngine, UnityEngine.UI, System.Collections, System.Collections.Generic
    - External Assets/Libraries: such as DOTween, Cinemachine, TextMeshPro, Newtonsoft.Json
    
    If the project requires any external assets/packages, they should be included in the project dependencies section that you will provide later on after writing the code.
</reasoning_process_step_by_step>

<main_goal>
    Write clean C# code that is functional and easy to understand. It should follow Unity best practices, be split into multiple methods that are well documented with their own detailed XML comments. The code implements proper error handling, input validation, and follows object-oriented design principles.
</main_goal>

<commenting_instructions>
    Insert XML documentation comments in /// format. 
    
    For script files, include a top-level comment with:
    ```csharp
    /// <summary>
    /// Script name
    /// 
    /// Description
    /// 
    /// Methods
    /// 
    /// Usage Example(s), if applicable
    /// </summary>
    ```
    
    For every method, include XML documentation that describes the purpose of the method, its parameters, and return values. If the method doesn't have any parameters or return values, it should still be documented appropriately. The method_examples section at the end of the prompt shows how to do this.
</commenting_instructions>

<debugging_log_instructions>
    Set up and use Unity's Debug.Log system with clear prefixes that identify the source:
    ```csharp
    /// <summary>
    /// LoggingDemo.cs
    /// 
    /// Demonstrates proper logging setup and usage in Unity.
    /// 
    /// Methods:
    ///     ProcessData(string inputData): Processes input data and logs steps
    /// 
    /// Usage: Attach this script to a GameObject in your scene
    /// </summary>
    using UnityEngine;
    
    public class LoggingDemo : MonoBehaviour
    {
        private string _className;
        
        private void Awake()
        {
            _className = GetType().Name;
        }
    }
    ```
    
    For each method in the script, use Debug.Log calls instead of other debugging methods:
        - Log input variables at the beginning of the method
        - Log output/return values at the end of the method
    
    Format example:
    ```csharp
    Debug.Log($"[{_className}] ProcessData | input: {inputData}");
    Debug.Log($"[{_className}] ProcessData | output: {outputData}");
    ```

    For multiple variables, use the pipe separator:
    ```csharp
    Debug.Log($"[{_className}] ProcessData | variable1: {variable1} | variable2: {variable2}");
    ```

    For different log types use:
    ```csharp
    Debug.Log($"[{_className}] Info message"); // Regular information
    Debug.LogWarning($"[{_className}] Warning message"); // Warnings
    Debug.LogError($"[{_className}] Error message"); // Errors
    ```

    Refer to the method examples in the section below for the correct logging format.
</debugging_log_instructions>

<error_handling_instructions>
    Include error handling and input validation in each of the methods. This is outlined in the examples section provided below.
    
    For critical errors, consider logging the error and handling it gracefully:
    ```csharp
    /// <summary>
    /// CriticalOperations.cs
    /// 
    /// Handles critical operations with proper error handling.
    /// 
    /// Methods:
    ///     PerformCriticalOperation(): Performs a critical operation with error handling
    /// 
    /// Usage: Attach this script to any GameObject that needs critical operations
    /// </summary>
    using UnityEngine;
    using System;
    
    public class CriticalOperations : MonoBehaviour
    {
        private string _className;
        
        private void Awake()
        {
            _className = GetType().Name;
        }
        
        public void Start()
        {
            try
            {
                // Critical operation
                var result = PerformCriticalOperation();
            }
            catch (Exception e)
            {
                Debug.LogError($"[{_className}] Critical error: {e.Message}");
                // Handle the error gracefully, perhaps disabling functionality
                this.enabled = false;
            }
        }
    }
    ```
</error_handling_instructions>

<asset_handling_instructions>
    Unless it's a temporary asset that is created during runtime, the code should not hardcode paths to assets. Instead, use proper Unity asset references, such as SerializeField or direct assignment in the Inspector.
    
    Use Unity's Resources or AssetDatabase for dynamic asset loading:
    ```csharp
    /// <summary>
    /// AssetLoader.cs
    /// 
    /// Loads and manages Unity assets dynamically.
    /// 
    /// Methods:
    ///     LoadTexture(string texturePath): Loads a texture from Resources
    /// 
    /// Usage: Attach to a GameObject that needs dynamic asset loading
    /// </summary>
    using UnityEngine;
    
    public class AssetLoader : MonoBehaviour
    {
        private string _className;
        
        private void Awake()
        {
            _className = GetType().Name;
        }
        
        /// <summary>
        /// Loads a texture from the Resources folder.
        /// </summary>
        /// <param name="texturePath">Path to the texture within Resources folder</param>
        /// <returns>The loaded Texture2D or null if not found</returns>
        public Texture2D LoadTexture(string texturePath)
        {
            Debug.Log($"[{_className}] LoadTexture | texturePath: {texturePath}");
            
            if (string.IsNullOrEmpty(texturePath))
            {
                Debug.LogError($"[{_className}] LoadTexture | Texture path is null or empty");
                return null;
            }
            
            Texture2D texture = null;
            
            try
            {
                texture = Resources.Load<Texture2D>(texturePath);
                
                if (texture == null)
                {
                    Debug.LogError($"[{_className}] LoadTexture | Texture not found: {texturePath}");
                    return null;
                }
                
                Debug.Log($"[{_className}] LoadTexture | Successfully loaded texture: {texturePath}");
            }
            catch (System.Exception e)
            {
                Debug.LogError($"[{_className}] LoadTexture | Error loading texture: {e.Message}");
            }
            
            return texture;
        }
    }
    ```
</asset_handling_instructions>

<event_based_programming_instructions>
    For managing event-based interactions between components, use the C# event system or Unity's event system appropriately:
    
    ```csharp
    /// <summary>
    /// GameEventManager.cs
    /// 
    /// Manages game-wide events using C# event system.
    /// 
    /// Methods:
    ///     TriggerGameEvent(string eventName): Triggers a named game event
    /// 
    /// Usage: Create as a singleton and use throughout your game
    /// </summary>
    using UnityEngine;
    using System;
    using System.Collections.Generic;
    
    public class GameEventManager : MonoBehaviour
    {
        // Singleton instance
        public static GameEventManager Instance { get; private set; }
        
        // Dictionary to store different event types
        private Dictionary<string, Action> _gameEvents = new Dictionary<string, Action>();
        private string _className;
        
        private void Awake()
        {
            // Singleton pattern
            if (Instance != null && Instance != this)
            {
                Destroy(gameObject);
                return;
            }
            
            Instance = this;
            DontDestroyOnLoad(gameObject);
            
            _className = GetType().Name;
        }
        
        /// <summary>
        /// Subscribes to a named game event.
        /// </summary>
        /// <param name="eventName">The name of the event to subscribe to</param>
        /// <param name="listener">The callback function to invoke when the event is triggered</param>
        public void Subscribe(string eventName, Action listener)
        {
            Debug.Log($"[{_className}] Subscribe | eventName: {eventName}");
            
            if (string.IsNullOrEmpty(eventName))
            {
                Debug.LogError($"[{_className}] Subscribe | Event name is null or empty");
                return;
            }
            
            // Create event if it doesn't exist
            if (!_gameEvents.ContainsKey(eventName))
            {
                _gameEvents[eventName] = null;
            }
            
            // Add listener
            _gameEvents[eventName] += listener;
        }
        
        /// <summary>
        /// Unsubscribes from a named game event.
        /// </summary>
        /// <param name="eventName">The name of the event to unsubscribe from</param>
        /// <param name="listener">The callback function to remove</param>
        public void Unsubscribe(string eventName, Action listener)
        {
            Debug.Log($"[{_className}] Unsubscribe | eventName: {eventName}");
            
            if (string.IsNullOrEmpty(eventName))
            {
                Debug.LogError($"[{_className}] Unsubscribe | Event name is null or empty");
                return;
            }
            
            // Remove listener if event exists
            if (_gameEvents.ContainsKey(eventName))
            {
                _gameEvents[eventName] -= listener;
            }
        }
        
        /// <summary>
        /// Triggers a named game event.
        /// </summary>
        /// <param name="eventName">The name of the event to trigger</param>
        public void TriggerGameEvent(string eventName)
        {
            Debug.Log($"[{_className}] TriggerGameEvent | eventName: {eventName}");
            
            if (string.IsNullOrEmpty(eventName))
            {
                Debug.LogError($"[{_className}] TriggerGameEvent | Event name is null or empty");
                return;
            }
            
            // Invoke event if it exists
            if (_gameEvents.ContainsKey(eventName))
            {
                _gameEvents[eventName]?.Invoke();
            }
            else
            {
                Debug.LogWarning($"[{_className}] TriggerGameEvent | No listeners registered for event: {eventName}");
            }
        }
    }
    ```
</event_based_programming_instructions>

<project_dependencies_and_instructions_how_to_use_the_code>
    After writing the code, the project dependencies section should be written in its own section, provided inside backticks. It should contain the Unity packages and external assets required for the code to work properly. These dependencies were determined during the reasoning step-by-step process.

    Include version numbers for critical dependencies, for example:
    ```
    Unity 2021.3 LTS or newer
    TextMeshPro 3.0.6
    DOTween 1.2.420
    Cinemachine 2.8.9
    ```

    If the script/prefab has any setup requirements, the instructions on how to use the code should be provided after listing the project dependencies.
</project_dependencies_and_instructions_how_to_use_the_code>

<update_readme_documentation>
    **CRITICAL:** Always update the README.md file located at the ROOT of the project after writing any code or making changes.

    The README.md file should be comprehensive and include:

    ```markdown
    # Game Title

    Brief description of what the Unity game does and its main gameplay mechanics.

    ## 🎮 Features

    - List key gameplay features and mechanics
    - Unity C# development with modular component architecture
    - Object-oriented design with proper event systems
    - Performance optimized with object pooling
    - Comprehensive error handling and debug logging
    - Scene management and state persistence

    ## 🛠️ Technology Stack

    - **Engine:** Unity 2021.3 LTS or newer
    - **Programming:** C# with .NET Standard 2.1
    - **UI:** Unity UI (uGUI) or UI Toolkit
    - **Audio:** Unity Audio System with AudioSource/AudioMixer
    - **Physics:** Unity Physics Engine (3D/2D)
    - **Development:** Unity Editor, Visual Studio/VS Code

    ## 📦 Unity Packages & Dependencies

    ```
    Unity 2021.3 LTS or newer
    TextMeshPro 3.0.6
    DOTween 1.2.420 (optional)
    Cinemachine 2.8.9 (optional)
    Unity Analytics 4.0.1 (optional)
    Unity Addressables 1.19.19 (optional)
    ```

    ## 📁 Project Structure

    ```
    /Unity Project Root
    ├── Assets/
    │   ├── Scripts/
    │   │   ├── Managers/      # Game managers and singletons
    │   │   ├── Player/        # Player-related scripts
    │   │   ├── UI/           # User interface scripts
    │   │   ├── Gameplay/     # Core gameplay mechanics
    │   │   └── Utils/        # Utility scripts and helpers
    │   ├── Prefabs/          # Reusable game objects
    │   ├── Scenes/           # Game scenes
    │   ├── Materials/        # Materials and shaders
    │   ├── Textures/         # Texture assets
    │   ├── Audio/            # Sound effects and music
    │   └── Animations/       # Animation clips and controllers
    ├── Packages/             # Package Manager dependencies
    ├── ProjectSettings/      # Unity project settings
    └── README.md            # This file
    ```

    ## 🔧 Prerequisites

    - **Unity Hub** (latest version)
    - **Unity Editor** 2021.3 LTS or newer
    - **Visual Studio** 2019/2022 or **Visual Studio Code**
    - **Git** for version control
    - **Git LFS** for large assets (recommended)

    ## 📦 Installation & Setup

    ### 1. Clone the repository:
    ```bash
    git clone <repository-url>
    cd <project-name>
    ```

    ### 2. Open in Unity:
    - Open Unity Hub
    - Click "Open" and select the project folder
    - Unity will automatically import all assets and packages

    ### 3. Configure Project Settings:
    - Set target platform (File → Build Settings)
    - Configure input settings if using custom controls
    - Set up audio settings and quality levels

    ### 4. Install Required Packages:
    - Open Package Manager (Window → Package Manager)
    - Install required packages listed in dependencies
    - Verify all scripts compile without errors

    ## 🏃‍♂️ Running the Game

    ### In Unity Editor:
    1. Open the main scene (usually in `Assets/Scenes/`)
    2. Click the Play button in the Unity Editor
    3. Test gameplay mechanics in the Scene/Game view

    ### Building the Game:
    1. Go to File → Build Settings
    2. Add scenes to the build (drag from Assets)
    3. Select target platform
    4. Click "Build" or "Build and Run"

    ## 🎯 Core Components

    ### Game Managers
    - **GameManager**: Controls overall game state and flow
    - **SceneManager**: Handles scene transitions and loading
    - **AudioManager**: Manages background music and sound effects
    - **InputManager**: Processes player input across different devices

    ### Player Systems
    - **PlayerController**: Handles player movement and physics
    - **PlayerStats**: Manages player health, score, and progression
    - **PlayerInput**: Processes and translates input to game actions

    ### UI Systems
    - **UIManager**: Controls UI panels and transitions
    - **HUD**: Displays game information (health, score, etc.)
    - **MenuSystem**: Main menu, pause menu, settings

    ## 🔧 Configuration

    ### Game Settings
    - Configure gameplay parameters in ScriptableObjects
    - Adjust physics settings in Project Settings
    - Set up input mappings for different control schemes
    - Configure audio mixer groups for sound management

    ### Build Settings
    - Platform-specific settings (resolution, graphics quality)
    - Optimization settings for target devices
    - Asset bundle configuration (if using)

    ## 🎮 Controls

    | Action | Key/Button | Controller |
    |--------|------------|------------|
    | Move | WASD / Arrow Keys | Left Stick |
    | Jump | Spacebar | A Button |
    | Interact | E | X Button |
    | Pause | Escape | Start Button |

    ## 🐛 Debug Features

    - **Debug Logging**: Comprehensive logging with component names
    - **Gizmos**: Visual debugging in Scene view
    - **Debug UI**: In-game debug information overlay
    - **Console Commands**: Runtime debugging commands

    ## 🧪 Testing

    ### Play Mode Testing:
    - Test all gameplay mechanics in Unity Editor
    - Verify UI responsiveness and functionality
    - Check performance with Unity Profiler

    ### Build Testing:
    - Test builds on target platforms
    - Verify asset loading and scene transitions
    - Check memory usage and performance

    ## 🚀 Deployment

    ### Build Configuration:
    ```
    Development Build: OFF (for release)
    Script Debugging: OFF (for release)
    Compression Method: LZ4 (faster) or LZ4HC (smaller)
    ```

    ### Platform-Specific:
    - **PC/Mac/Linux**: Standalone build
    - **Mobile**: Configure for iOS/Android app stores
    - **WebGL**: Optimize for web deployment
    - **Console**: Platform-specific certification requirements

    ## 🤝 Contributing

    1. Fork the repository
    2. Create a feature branch (`git checkout -b feature/new-mechanic`)
    3. Follow Unity coding conventions
    4. Test thoroughly in Editor and builds
    5. Commit changes (`git commit -m 'Add new gameplay mechanic'`)
    6. Push to branch (`git push origin feature/new-mechanic`)
    7. Open a Pull Request

    ## 📝 License

    This project is licensed under the MIT License - see the LICENSE file for details.

    ## 🔧 Development Notes

    - Follow Unity's component-based architecture
    - Use ScriptableObjects for game data and settings
    - Implement proper object pooling for frequently spawned objects
    - Use Unity's event system for decoupled communication
    - Profile regularly to maintain target frame rates
    - Comment code thoroughly for team collaboration
    ```

    **Important Notes:**
    - Always update the README.md immediately after completing code changes
    - Include screenshots or GIFs of gameplay mechanics
    - Update Unity version requirements if changed
    - Document any external plugins or assets used
    - Provide troubleshooting section for common issues
    - Keep build instructions current with latest Unity practices
</update_readme_documentation>

<code_refactoring_instructions>
    After writing code, perform a thorough review as an additional step to identify refactoring opportunities. Continuously refactor to maintain clean, maintainable code that follows best practices in Unity and C# development.
    
    Always check your code against these refactoring criteria:
    
    1. Code organization:
       - Are scripts properly organized and separated by responsibility?
       - Are related methods grouped together logically?
       - Are components properly distributed across GameObjects according to their functionality?
    
    2. Code duplication:
       - Is there repeated code that could be extracted into helper methods?
       - Are there patterns that could be abstracted into reusable components or ScriptableObjects?
       - Could inheritance or composition be used to reduce duplication?
    
    3. Component architecture:
       - Are MonoBehaviour components following the single responsibility principle?
       - Could large scripts be split into smaller, more focused components?
       - Are dependencies between components minimized and well-defined?
    
    4. Method structure:
       - Are methods properly scoped and focused on a single task?
       - Could large methods be split into smaller, more maintainable pieces?
       - Are private methods used appropriately to encapsulate implementation details?
    
    5. Performance:
       - Are there unnecessary operations in Update() or FixedUpdate() that could be optimized?
       - Are expensive operations properly cached or optimized?
       - Are physics operations used efficiently?
       - Are you using appropriate data structures for the task?
    
    6. Code style:
       - Is the code consistent with C# and Unity coding conventions?
       - Are naming conventions clear and consistent?
       - Is the code properly indented and formatted?
    
    7. Memory management:
       - Are object instantiations and destructions handled efficiently?
       - Are you properly managing references to avoid memory leaks?
       - Are you using object pooling where appropriate?
    
    8. Error handling:
       - Are null references properly checked and handled?
       - Are errors properly caught and handled at appropriate levels?
       - Is error reporting informative and useful for debugging?

    9. Scene organization:
       - Is the scene hierarchy well-organized and easy to navigate?
       - Are prefabs used appropriately to encapsulate reusable components?
       - Are GameObjects properly named and tagged?

    When implementing larger features, include a dedicated refactoring pass after the initial implementation is complete. Document any technical debt that you're aware of but couldn't address immediately.
</code_refactoring_instructions>
