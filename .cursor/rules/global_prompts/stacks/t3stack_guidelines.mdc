---
description: 
globs: 
alwaysApply: true
---
<role>Expert React + TypeScript + Next.js + tRPC + Tailwind Developer</role>

<tech_stack_configuration>
    - Next.js 15 with App Router
    - React 19 with latest features
    - TypeScript 5.8.2 for type safety
    - tRPC 11.0.0 with TanStack Query
    - Tailwind CSS 4.0.15 with new CSS-first approach
    - Zod for schema validation
    - T3 environment variables for type-safe env handling
</tech_stack_configuration>

<main_goal>
    Write clean TypeScript React code that leverages the T3 stack properly. Use tRPC for type-safe API communication, implement proper error handling with React Error Boundaries, use Tailwind CSS 4.0 for styling, and follow Next.js 15 App Router patterns. The code should be functional, type-safe, and follow modern React patterns with proper state management.
</main_goal>

<commenting_instructions>
    Insert JSDoc comments in /** */ format for T3 stack components.
    
    For files, include a top-level comment with:
    /**
     * components/PostCard.tsx
     * 
     * Post display component with tRPC integration
     * Uses Tailwind CSS 4.0 for styling and TypeScript for type safety
     * 
     * Components: PostCard
     * 
     * Usage: <PostCard post={post} onEdit={handleEdit} />
     */
    
    For tRPC procedures:
    /**
     * Creates a new post with validation
     * 
     * @param input - Post creation data validated by createPostSchema
     * @param input.title - The post title (1-100 characters)
     * @param input.content - Optional post content
     * @returns Promise<Post> The created post with ID and timestamps
     * 
     * @throws TRPCError BAD_REQUEST if validation fails
     * @throws TRPCError INTERNAL_SERVER_ERROR if database fails
     */
</commenting_instructions>

<debugging_log_instructions>
    Set up T3 stack logging with environment detection:
    
    Create utils/logger.ts:
    ```typescript
    type LogLevel = 'debug' | 'info' | 'warn' | 'error';
    
    class T3Logger {
      private isDev = process.env.NODE_ENV === 'development';
      
      debug(message: string, context?: Record<string, unknown>): void {
        if (!this.isDev) return;
        console.debug(`[${new Date().toISOString()}] [DEBUG] ${message}`, context);
      }
      
      info(message: string, context?: Record<string, unknown>): void {
        console.info(`[${new Date().toISOString()}] [INFO] ${message}`, context);
      }
      
      error(message: string, error?: Error, context?: Record<string, unknown>): void {
        const errorMsg = error ? `${message} - ${error.message}` : message;
        console.error(`[${new Date().toISOString()}] [ERROR] ${errorMsg}`, { error, ...context });
      }
    }
    
    export const logger = new T3Logger();
    ```
    
    Add tRPC logging middleware:
    ```typescript
    const loggingMiddleware = t.middleware(async ({ next, path, type }) => {
      const start = Date.now();
      logger.debug(`[tRPC] ${type} ${path} started`);
      
      const result = await next();
      const duration = Date.now() - start;
      
      if (result.ok) {
        logger.info(`[tRPC] ${path} completed in ${duration}ms`);
      } else {
        logger.error(`[tRPC] ${path} failed after ${duration}ms`, result.error);
      }
      
      return result;
    });
    ```
</debugging_log_instructions>

<error_handling_instructions>
    Include comprehensive error handling for T3 stack:
    
    React Error Boundary:
    ```typescript
    'use client';
    import { Component, type ErrorInfo, type ReactNode } from 'react';
    import { logger } from '~/utils/logger';
    
    export class ErrorBoundary extends Component<{children: ReactNode}, {hasError: boolean, error: Error | null}> {
      componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
        logger.error('React Error Boundary:', error, { componentStack: errorInfo.componentStack });
      }
      
      render(): ReactNode {
        if (this.state.hasError) {
          return (
            <div className="flex min-h-screen items-center justify-center bg-gray-50">
              <div className="max-w-md rounded-lg bg-white p-6 shadow-lg">
                <h3 className="text-lg font-medium text-red-800 mb-2">Something went wrong</h3>
                <button onClick={() => window.location.reload()} className="mt-4 w-full bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                  Reload Page
                </button>
              </div>
            </div>
          );
        }
        return this.props.children;
      }
    }
    ```
    
    tRPC Error Handler:
    ```typescript
    import { TRPCError } from '@trpc/server';
    
    export function handleTRPCError(error: unknown, context: string): never {
      logger.error(`tRPC Error in ${context}:`, error as Error);
      
      if (error instanceof TRPCError) throw error;
      
      throw new TRPCError({
        code: 'INTERNAL_SERVER_ERROR',
        message: 'An unexpected error occurred',
        cause: error,
      });
    }
    ```
</error_handling_instructions>

<tailwind_css_instructions>
    Implement Tailwind CSS 4.0 with new CSS-first approach:
    
    Configure in src/styles/globals.css:
    ```css
    @import "tailwindcss";
    
    @theme {
      --color-primary-50: #eff6ff;
      --color-primary-500: #3b82f6;
      --color-primary-600: #2563eb;
      --color-primary-700: #1d4ed8;
      
      --font-sans: var(--font-geist-sans), ui-sans-serif, system-ui;
      --spacing-18: 4.5rem;
    }
    
    @layer components {
      .btn-primary {
        @apply bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 focus:ring-2 focus:ring-primary-500;
      }
    }
    ```
    
    Class utility (utils/cn.ts):
    ```typescript
    import { type ClassValue, clsx } from 'clsx';
    import { twMerge } from 'tailwind-merge';
    
    export function cn(...inputs: ClassValue[]) {
      return twMerge(clsx(inputs));
    }
    ```
    
    PostCSS config:
    ```javascript
    export default {
      plugins: {
        "@tailwindcss/postcss": {},
      },
    };
    ```
</tailwind_css_instructions>

<state_management_instructions>
    Implement T3 stack state management patterns:
    
    For server state, use tRPC with TanStack Query:
    ```typescript
    const { data, isLoading, error } = api.post.getAll.useQuery({ limit: 20 });
    
    const createPost = api.post.create.useMutation({
      onSuccess: (newPost) => {
        logger.info('Post created', { postId: newPost.id });
        void utils.post.getAll.invalidate();
      },
      onError: (error) => {
        logger.error('Post creation failed', error);
      },
    });
    ```
    
    For global client state, use Zustand if needed:
    ```typescript
    import { create } from 'zustand';
    
    interface AppState {
      user: User | null;
      setUser: (user: User | null) => void;
    }
    
    export const useAppStore = create<AppState>((set) => ({
      user: null,
      setUser: (user) => set({ user }),
    }));
    ```
</state_management_instructions>

<api_integration_instructions>
    Implement tRPC API integration with proper patterns:
    
    tRPC Router (server/api/routers/post.ts):
    ```typescript
    import { z } from 'zod';
    import { createTRPCRouter, publicProcedure } from '~/server/api/trpc';
    import { logger } from '~/utils/logger';
    
    const createPostSchema = z.object({
      title: z.string().min(1).max(100),
      content: z.string().optional(),
    });
    
    export const postRouter = createTRPCRouter({
      getAll: publicProcedure
        .input(z.object({ limit: z.number().min(1).max(100).default(10) }))
        .query(async ({ input }) => {
          logger.debug('Fetching posts', { limit: input.limit });
          return { posts: [], nextCursor: null };
        }),
    
      create: publicProcedure
        .input(createPostSchema)
        .mutation(async ({ input }) => {
          logger.info('Creating post', { title: input.title });
          return {
            id: `post_${Date.now()}`,
            title: input.title,
            content: input.content,
            createdAt: new Date(),
          };
        }),
    });
    ```
    
    Client usage:
    ```typescript
    'use client';
    import { api } from '~/trpc/react';
    
    export function PostList() {
      const { data, isLoading, error } = api.post.getAll.useQuery({ limit: 20 });
      
      if (isLoading) return <div className="animate-pulse">Loading...</div>;
      if (error) return <div className="text-red-600">Error: {error.message}</div>;
      
      return (
        <div className="space-y-4">
          {data?.posts.map((post) => (
            <div key={post.id} className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-lg font-medium">{post.title}</h3>
            </div>
          ))}
        </div>
      );
    }
    ```
</api_integration_instructions>

<component_patterns_instructions>
    Follow React + TypeScript + tRPC component patterns:
    
    Create reusable UI components with forwardRef:
    ```typescript
    interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
      variant?: 'primary' | 'secondary';
      loading?: boolean;
    }
    
    export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
      ({ className, variant = 'primary', loading, children, ...props }, ref) => (
        <button
          ref={ref}
          className={cn(
            'inline-flex items-center justify-center rounded-md font-medium transition-colors',
            variant === 'primary' && 'bg-primary-600 text-white hover:bg-primary-700',
            variant === 'secondary' && 'bg-gray-100 text-gray-900 hover:bg-gray-200',
            className
          )}
          disabled={loading}
          {...props}
        >
          {loading && <Spinner className="mr-2 h-4 w-4" />}
          {children}
        </button>
      )
    );
    ```
    
    Compound components:
    ```typescript
    export function PostManager() {
      return (
        <div className="space-y-6">
          <PostManager.Header />
          <PostManager.List />
        </div>
      );
    }
    
    PostManager.Header = function PostManagerHeader() {
      return <div className="flex items-center justify-between">...</div>;
    };
    ```
</component_patterns_instructions>

<environment_validation_instructions>
    Use T3 environment validation (src/env.js):
    ```typescript
    import { createEnv } from "@t3-oss/env-nextjs";
    import { z } from "zod";
    
    export const env = createEnv({
      server: {
        NODE_ENV: z.enum(["development", "test", "production"]),
        DATABASE_URL: z.string().url().optional(),
      },
      client: {
        NEXT_PUBLIC_APP_URL: z.string().url().optional(),
      },
      runtimeEnv: {
        NODE_ENV: process.env.NODE_ENV,
        DATABASE_URL: process.env.DATABASE_URL,
        NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
      },
      skipValidation: !!process.env.SKIP_ENV_VALIDATION,
      emptyStringAsUndefined: true,
    });
    ```
</environment_validation_instructions>

<update_readme_documentation>
    CRITICAL: Always update the README.md file for T3 stack projects.
    
    Include T3 stack specific documentation:
    - Technology stack (Next.js 15, React 19, TypeScript, tRPC, Tailwind CSS 4.0)
    - Project structure with src/ directory organization
    - tRPC API documentation and usage examples
    - Tailwind CSS 4.0 configuration and custom theme
    - Environment variable setup with T3 env
    - Development workflow with Turbo mode
    - Production build and deployment instructions
    
    Document T3 stack patterns and conventions used in the project.
</update_readme_documentation> 

<optimistic_updates_instructions>
    Implement zero-latency optimistic updates for T3 stack with tRPC:
    
    Core Principles:
    - Update UI instantly with temporary IDs
    - Store optimistic data separately from server state
    - Prevent server data from overwriting optimistic updates
    - Handle failures with automatic rollback
    - Clean up optimistic data after server response
    
    State Management Setup:
    ```typescript
    // Optimistic updates state for tracking pending operations
    const [optimisticUpdates, setOptimisticUpdates] = useState<{
      columns: Map<string, { tempId: string; originalId?: string; status: 'pending' | 'success' | 'error' }>;
      cards: Map<string, { tempId: string; originalId?: string; status: 'pending' | 'success' | 'error' }>;
    }>({
      columns: new Map(),
      cards: new Map(),
    });

    // Track optimistic data that should persist
    const [optimisticData, setOptimisticData] = useState<{
      columns: Map<string, ColumnType>;
      cards: Map<string, CardType>;
    }>({
      columns: new Map(),
      cards: new Map(),
    });
    ```
    
    tRPC Mutation with Optimistic Updates:
    ```typescript
    const createCardMutation = api.board.createCard.useMutation({
      onMutate: async (input) => {
        // Cancel any outgoing refetches
        await utils.board.getAll.cancel();
        
        // Create optimistic card
        const tempId = `temp_card_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const optimisticCard: CardType = {
          id: tempId,
          title: input.title,
          columnId: input.columnId,
          order: board.columns.find(col => col.id === input.columnId)?.cards.length || 0,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        // Update optimistic state
        setOptimisticUpdates(prev => ({
          ...prev,
          cards: new Map(prev.cards).set(tempId, { tempId, status: 'pending' })
        }));

        // Store optimistic data
        setOptimisticData(prev => ({
          ...prev,
          cards: new Map(prev.cards).set(tempId, optimisticCard)
        }));

        // Optimistically update the board
        setBoard(prevBoard => ({
          ...prevBoard,
          columns: prevBoard.columns.map(col => 
            col.id === input.columnId 
              ? { ...col, cards: [...col.cards, optimisticCard], updatedAt: new Date() }
              : col
          ),
          updatedAt: new Date(),
        }));

        logger.info('Optimistic card created', { 
          tempId, 
          title: input.title, 
          columnId: input.columnId,
          optimisticDataSize: optimisticData.cards.size
        });
        
        return { optimisticCard, tempId };
      },
      onSuccess: (newCard, variables, context) => {
        if (context) {
          // Update optimistic state to success
          setOptimisticUpdates(prev => ({
            ...prev,
            cards: new Map(prev.cards).set(context.tempId, { 
              tempId: context.tempId, 
              originalId: newCard.id, 
              status: 'success' 
            })
          }));

          // Get the optimistic card data
          const optimisticCard = optimisticData.cards.get(context.tempId);
          
          if (optimisticCard) {
            // Update board with real card ID and optimistic data
            setBoard(prevBoard => ({
              ...prevBoard,
              columns: prevBoard.columns.map(col => ({
                ...col,
                cards: col.cards.map(card => 
                  card.id === context.tempId ? { 
                    ...optimisticCard, // Use optimistic data
                    id: newCard.id, // But with real ID
                    updatedAt: new Date()
                  } : card
                ),
              })),
            }));

            // Clean up optimistic data
            setOptimisticData(prev => {
              const newCards = new Map(prev.cards);
              newCards.delete(context.tempId);
              return { ...prev, cards: newCards };
            });
          }

          logger.info('Card created successfully', { 
            tempId: context.tempId, 
            realId: newCard.id,
            optimisticCardFound: !!optimisticCard,
            optimisticCardTitle: optimisticCard?.title
          });
        }
      },
      onError: (error, variables, context) => {
        if (context) {
          // Update optimistic state to error
          setOptimisticUpdates(prev => ({
            ...prev,
            cards: new Map(prev.cards).set(context.tempId, { 
              tempId: context.tempId, 
              status: 'error' 
            })
          }));

          // Rollback optimistic update
          setBoard(prevBoard => ({
            ...prevBoard,
            columns: prevBoard.columns.map(col => ({
              ...col,
              cards: col.cards.filter(card => card.id !== context.tempId),
            })),
          }));

          logger.error('Card creation failed, rolled back', new Error(error.message), { 
            tempId: context.tempId 
          });
          showToast(`Failed to create card "${variables.title}". Please try again.`, 'error');
        }
      },
      onSettled: () => {
        // Clean up optimistic state after a delay
        setTimeout(() => {
          setOptimisticUpdates(prev => ({
            ...prev,
            cards: new Map()
          }));
          setOptimisticData(prev => ({
            ...prev,
            cards: new Map()
          }));
        }, 5000); // Extended delay to ensure server data has time to sync
      },
    });
    ```
    
    Prevent Server Data Overwrite:
    ```typescript
    // Update board when data loads from server
    useEffect(() => {
      if (boards && boards.length > 0) {
        const firstBoard = boards[0]!;
        
        // Only update board if we don't have any optimistic updates (pending or success)
        const hasAnyOptimisticUpdates = optimisticUpdates.columns.size > 0 || optimisticUpdates.cards.size > 0;
        
        if (!hasAnyOptimisticUpdates) {
          setBoard(firstBoard);
          logger.info('Board loaded from server', { 
            boardId: firstBoard.id,
            columnCount: firstBoard.columns.length,
            cardCount: firstBoard.columns.reduce((sum, col) => sum + col.cards.length, 0)
          });
        } else {
          logger.debug('Skipping server data update due to optimistic updates', {
            optimisticColumns: optimisticUpdates.columns.size,
            optimisticCards: optimisticUpdates.cards.size
          });
        }
      } else if (boards && boards.length === 0) {
        // Create default board if no boards exist
        logger.info('No boards found, creating default board');
        createBoardMutation.mutate({
          title: 'My Kanban Board',
          description: 'A simple kanban board for task management',
        });
      }
    }, [boards, createBoardMutation, utils.board.getAll, optimisticUpdates]);
    ```
    
    Toast Notifications for User Feedback:
    ```typescript
    // Toast notifications state
    const [toasts, setToasts] = useState<Array<{
      id: string;
      message: string;
      type: 'error' | 'success';
      timestamp: number;
    }>>([]);

    /**
     * Shows a toast notification
     */
    const showToast = useCallback((message: string, type: 'error' | 'success') => {
      const id = `toast_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      setToasts(prev => [...prev, { id, message, type, timestamp: Date.now() }]);
      
      // Auto-remove toast after 5 seconds
      setTimeout(() => {
        setToasts(prev => prev.filter(toast => toast.id !== id));
      }, 5000);
    }, []);
    ```
    
    Key Implementation Rules:
    1. **Instant UI Updates**: Always update UI immediately with temporary IDs
    2. **Separate Data Storage**: Store optimistic data separately from server state
    3. **Block Server Overwrites**: Prevent server data from overwriting optimistic updates
    4. **Automatic Rollback**: Handle failures by reverting optimistic changes
    5. **Delayed Cleanup**: Clean up optimistic data after extended delay (5+ seconds)
    6. **User Feedback**: Show toast notifications for failed operations
    7. **Debug Logging**: Log all optimistic operations for debugging
    8. **Type Safety**: Ensure all optimistic data maintains proper TypeScript types
    
    Edge Cases Handled:
    - Network disconnections during optimistic updates
    - Multiple rapid operations
    - Server errors and timeouts
    - Data consistency between client and server
    - Concurrent optimistic and server operations
</optimistic_updates_instructions>
