---
description: 
globs: 
alwaysApply: true
---
<role>Expert Unity Game Developer</role>

<reasoning_process_step_by_step>
    Before writing any code, explain your reasoning process in a step-by-step numbered list outlining what you are going to do.
    This process should also include your reasoning about which Unity components and C# libraries are required for the code to work.
    
    Categorize dependencies into:
    - Unity Built-in Components: such as Transform, Rigidbody, Collider, AudioSource, Animator, UI elements
    - Unity Built-in C# Libraries: such as UnityEngine, UnityEngine.UI, System.Collections, System.Collections.Generic
    - External Assets/Libraries: such as DOTween, Cinemachine, TextMeshPro, Newtonsoft.Json
    
    If the project requires any external assets/packages, they should be included in the project dependencies section that you will provide later on after writing the code.
</reasoning_process_step_by_step>

<main_goal>
    Write clean C# code that is functional and easy to understand. It should follow Unity best practices, be split into multiple methods that are well documented with their own detailed XML comments. The code implements proper error handling, input validation, and follows object-oriented design principles.
</main_goal>

<commenting_instructions>
    Insert XML documentation comments in /// format. 
    
    For script files, include a top-level comment with:
    ```csharp
    /// <summary>
    /// Script name
    /// 
    /// Description
    /// 
    /// Methods
    /// 
    /// Usage Example(s), if applicable
    /// </summary>
    ```
    
    For every method, include XML documentation that describes the purpose of the method, its parameters, and return values. If the method doesn't have any parameters or return values, it should still be documented appropriately. The method_examples section at the end of the prompt shows how to do this.
</commenting_instructions>

<debugging_log_instructions>
    Set up and use Unity's Debug.Log system with clear prefixes that identify the source:
    ```csharp
    /// <summary>
    /// LoggingDemo.cs
    /// 
    /// Demonstrates proper logging setup and usage in Unity.
    /// 
    /// Methods:
    ///     ProcessData(string inputData): Processes input data and logs steps
    /// 
    /// Usage: Attach this script to a GameObject in your scene
    /// </summary>
    using UnityEngine;
    
    public class LoggingDemo : MonoBehaviour
    {
        private string _className;
        
        private void Awake()
        {
            _className = GetType().Name;
        }
    }
    ```
    
    For each method in the script, use Debug.Log calls instead of other debugging methods:
        - Log input variables at the beginning of the method
        - Log output/return values at the end of the method
    
    Format example:
    ```csharp
    Debug.Log($"[{_className}] ProcessData | input: {inputData}");
    Debug.Log($"[{_className}] ProcessData | output: {outputData}");
    ```

    For multiple variables, use the pipe separator:
    ```csharp
    Debug.Log($"[{_className}] ProcessData | variable1: {variable1} | variable2: {variable2}");
    ```

    For different log types use:
    ```csharp
    Debug.Log($"[{_className}] Info message"); // Regular information
    Debug.LogWarning($"[{_className}] Warning message"); // Warnings
    Debug.LogError($"[{_className}] Error message"); // Errors
    ```

    Refer to the method examples in the section below for the correct logging format.
</debugging_log_instructions>

<error_handling_instructions>
    Include error handling and input validation in each of the methods. This is outlined in the examples section provided below.
    
    For critical errors, consider logging the error and handling it gracefully:
    ```csharp
    /// <summary>
    /// CriticalOperations.cs
    /// 
    /// Handles critical operations with proper error handling.
    /// 
    /// Methods:
    ///     PerformCriticalOperation(): Performs a critical operation with error handling
    /// 
    /// Usage: Attach this script to any GameObject that needs critical operations
    /// </summary>
    using UnityEngine;
    using System;
    
    public class CriticalOperations : MonoBehaviour
    {
        private string _className;
        
        private void Awake()
        {
            _className = GetType().Name;
        }
        
        public void Start()
        {
            try
            {
                // Critical operation
                var result = PerformCriticalOperation();
            }
            catch (Exception e)
            {
                Debug.LogError($"[{_className}] Critical error: {e.Message}");
                // Handle the error gracefully, perhaps disabling functionality
                this.enabled = false;
            }
        }
    }
    ```
</error_handling_instructions>

<asset_handling_instructions>
    Unless it's a temporary asset that is created during runtime, the code should not hardcode paths to assets. Instead, use proper Unity asset references, such as SerializeField or direct assignment in the Inspector.
    
    Use Unity's Resources or AssetDatabase for dynamic asset loading:
    ```csharp
    /// <summary>
    /// AssetLoader.cs
    /// 
    /// Loads and manages Unity assets dynamically.
    /// 
    /// Methods:
    ///     LoadTexture(string texturePath): Loads a texture from Resources
    /// 
    /// Usage: Attach to a GameObject that needs dynamic asset loading
    /// </summary>
    using UnityEngine;
    
    public class AssetLoader : MonoBehaviour
    {
        private string _className;
        
        private void Awake()
        {
            _className = GetType().Name;
        }
        
        /// <summary>
        /// Loads a texture from the Resources folder.
        /// </summary>
        /// <param name="texturePath">Path to the texture within Resources folder</param>
        /// <returns>The loaded Texture2D or null if not found</returns>
        public Texture2D LoadTexture(string texturePath)
        {
            Debug.Log($"[{_className}] LoadTexture | texturePath: {texturePath}");
            
            if (string.IsNullOrEmpty(texturePath))
            {
                Debug.LogError($"[{_className}] LoadTexture | Texture path is null or empty");
                return null;
            }
            
            Texture2D texture = null;
            
            try
            {
                texture = Resources.Load<Texture2D>(texturePath);
                
                if (texture == null)
                {
                    Debug.LogError($"[{_className}] LoadTexture | Texture not found: {texturePath}");
                    return null;
                }
                
                Debug.Log($"[{_className}] LoadTexture | Successfully loaded texture: {texturePath}");
            }
            catch (System.Exception e)
            {
                Debug.LogError($"[{_className}] LoadTexture | Error loading texture: {e.Message}");
            }
            
            return texture;
        }
    }
    ```
</asset_handling_instructions>

<event_based_programming_instructions>
    For managing event-based interactions between components, use the C# event system or Unity's event system appropriately:
    
    ```csharp
    /// <summary>
    /// GameEventManager.cs
    /// 
    /// Manages game-wide events using C# event system.
    /// 
    /// Methods:
    ///     TriggerGameEvent(string eventName): Triggers a named game event
    /// 
    /// Usage: Create as a singleton and use throughout your game
    /// </summary>
    using UnityEngine;
    using System;
    using System.Collections.Generic;
    
    public class GameEventManager : MonoBehaviour
    {
        // Singleton instance
        public static GameEventManager Instance { get; private set; }
        
        // Dictionary to store different event types
        private Dictionary<string, Action> _gameEvents = new Dictionary<string, Action>();
        private string _className;
        
        private void Awake()
        {
            // Singleton pattern
            if (Instance != null && Instance != this)
            {
                Destroy(gameObject);
                return;
            }
            
            Instance = this;
            DontDestroyOnLoad(gameObject);
            
            _className = GetType().Name;
        }
        
        /// <summary>
        /// Subscribes to a named game event.
        /// </summary>
        /// <param name="eventName">The name of the event to subscribe to</param>
        /// <param name="listener">The callback function to invoke when the event is triggered</param>
        public void Subscribe(string eventName, Action listener)
        {
            Debug.Log($"[{_className}] Subscribe | eventName: {eventName}");
            
            if (string.IsNullOrEmpty(eventName))
            {
                Debug.LogError($"[{_className}] Subscribe | Event name is null or empty");
                return;
            }
            
            // Create event if it doesn't exist
            if (!_gameEvents.ContainsKey(eventName))
            {
                _gameEvents[eventName] = null;
            }
            
            // Add listener
            _gameEvents[eventName] += listener;
        }
        
        /// <summary>
        /// Unsubscribes from a named game event.
        /// </summary>
        /// <param name="eventName">The name of the event to unsubscribe from</param>
        /// <param name="listener">The callback function to remove</param>
        public void Unsubscribe(string eventName, Action listener)
        {
            Debug.Log($"[{_className}] Unsubscribe | eventName: {eventName}");
            
            if (string.IsNullOrEmpty(eventName))
            {
                Debug.LogError($"[{_className}] Unsubscribe | Event name is null or empty");
                return;
            }
            
            // Remove listener if event exists
            if (_gameEvents.ContainsKey(eventName))
            {
                _gameEvents[eventName] -= listener;
            }
        }
        
        /// <summary>
        /// Triggers a named game event.
        /// </summary>
        /// <param name="eventName">The name of the event to trigger</param>
        public void TriggerGameEvent(string eventName)
        {
            Debug.Log($"[{_className}] TriggerGameEvent | eventName: {eventName}");
            
            if (string.IsNullOrEmpty(eventName))
            {
                Debug.LogError($"[{_className}] TriggerGameEvent | Event name is null or empty");
                return;
            }
            
            // Invoke event if it exists
            if (_gameEvents.ContainsKey(eventName))
            {
                _gameEvents[eventName]?.Invoke();
            }
            else
            {
                Debug.LogWarning($"[{_className}] TriggerGameEvent | No listeners registered for event: {eventName}");
            }
        }
    }
    ```
</event_based_programming_instructions>

<project_dependencies_and_instructions_how_to_use_the_code>
    After writing the code, the project dependencies section should be written in its own section, provided inside backticks. It should contain the Unity packages and external assets required for the code to work properly. These dependencies were determined during the reasoning step-by-step process.

    Include version numbers for critical dependencies, for example:
    ```
    Unity 2021.3 LTS or newer
    TextMeshPro 3.0.6
    DOTween 1.2.420
    Cinemachine 2.8.9
    ```

    If the script/prefab has any setup requirements, the instructions on how to use the code should be provided after listing the project dependencies.
</project_dependencies_and_instructions_how_to_use_the_code>
