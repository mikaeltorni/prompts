---
alwaysApply: true
---

<prompt>
  <name>Project Functions Documentation Guidelines</name>
  <description>
    Whenever you add or modify features in the codebase, update the documentation in <file>.cursor/PROJECT_FUNCTIONS_DOCUMENTATION.md</file>. For each new feature or significant change, clearly explain:
    <list>
      <item>What the feature does</item>
      <item>Which files are responsible for implementing it</item>
      <item>How the feature interacts with other parts of the project</item>
    </list>
    This documentation should be detailed enough for future contributors (including the model itself) to quickly understand the purpose and location of each feature. The documentation in <file>.cursor/</file> is loaded into the model's context window every time, so keeping it up-to-date ensures that the model can reference and utilize this information effectively. Always encourage the use of these documentation files to make future changes easier and more reliable.
    <example>
      <title>Example: Documenting a New Drag-and-Drop Feature</title>
      <content>
        ### Drag-and-Drop System

        **Purpose**: Enables intuitive card and column movement with visual feedback.

        **Files Responsible**:
        - `src/utils/dragAndDrop.ts` - Core drag and drop logic and utilities
        - `src/app/components/Board.tsx` - Drag context and event handling
        - `src/app/components/Column.tsx` - Column-specific drop zones
        - `src/app/components/Card.tsx` - Card-specific drag handles

        **How it interacts**:
        - Integrates with Board, Column, and Card components for drag-and-drop operations.
        - Updates board state and provides visual feedback during drag events.
      </content>
    </example>
    <example>
      <title>Example: Documenting a Keyboard Shortcuts System</title>
      <content>
        ### Keyboard Shortcuts

        **Purpose**: Provides efficient keyboard navigation and quick actions.

        **Files Responsible**:
        - `src/utils/hotkeys.ts` - Centralized hotkey management
        - `src/app/components/Board.tsx` - Hotkey integration

        **How it interacts**:
        - Integrates with Board and form components for keyboard shortcuts.
        - Prevents hotkey conflicts when typing in input fields.
      </content>
    </example>
  </description>
  <instructions>
    <step>After implementing a new feature or making a significant change, immediately document it in <file>.cursor/PROJECT_FUNCTIONS_DOCUMENTATION.md</file>.</step>
    <step>Include a clear explanation of the feature, its purpose, and the files involved.</step>
    <step>Reference this documentation when making future changes or onboarding new contributors.</step>
    <step>Remember: The model will always read these files, so comprehensive and clear documentation will directly improve its performance and accuracy.</step>
    <step>Do not use numbers in section headers. Use clear, descriptive headings (e.g., <code>### Drag-and-Drop System</code> instead of <code>### 1. Drag-and-Drop System</code>).</step>
    <step>Provide examples as shown above to guide contributors on the expected format.</step>
  </instructions>
</prompt>
